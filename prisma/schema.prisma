// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  fullName String
  email String @unique
  password String
  phoneNumber String
  address String?
  gender GenderEnum?
  imageProfile String?

  transaction Transaction[]

  createdAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt

  @@map("user")
}

model Tour {
  id Int @id @default(autoincrement())
  tripTitle String
  country String
  accomodation String
  eat String
  startDateTrip DateTime
  endDateTrip DateTime
  price Int @default(0)
  quota Int @default(0)
  description String
  tourImage TourImage[]

  transaction Transaction[]

  createdAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt

  @@map("tour")
}

model TourImage {
  id Int @id @default(autoincrement())
  url String

  tour Tour @relation(fields: [tourId], references: [id])
  tourId Int

  createdAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt

  @@map("tourImage")
}

model Transaction {
  id Int @id @default(autoincrement())
  transactionCode String
  quantity Int @default(0)
  totalPrice Int @default(0)
  statusPayment String

  user User @relation(fields: [userId], references: [id])
  userId Int

  tour Tour @relation(fields: [tourId], references: [id])
  tourId Int

  createdAt DateTime @default(now())
  updateAt DateTime @default(now()) @updatedAt

  @@map("transaction")
}

enum PaymentStatus {
  PENDING
  APPROVED
  CANCELLED
}

enum GenderEnum {
  Male
  Female
}
